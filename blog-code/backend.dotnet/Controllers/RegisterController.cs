using System.Web.Http;
using Microsoft.Azure.Mobile.Server.Config;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System;
using System.Threading.Tasks;
using System.Security.Claims;
using System.Security.Principal;
using Microsoft.Azure.Mobile.Server.Authentication;
using System.Linq;
using Microsoft.Azure.Mobile.Server;
using Microsoft.Azure.NotificationHubs;
using System.Web.Http.Controllers;

namespace backend.dotnet.Controllers
{
    [Authorize]
    [MobileAppController]
    public class RegisterController : ApiController
    {
        private NotificationHubClient hub;

        protected override void Initialize(HttpControllerContext context)
        {
            // Call the original Initialize() method
            base.Initialize(context);

            // Gets the settings
            var settings = Configuration.GetMobileAppSettingsProvider().GetMobileAppSettings();
            var hubName = settings.NotificationHubName;
            var connectionString = settings.Connections[MobileAppSettingsKeys.NotificationHubConnectionString].ConnectionString;

            // Create a new Notification Hub client.
            hub = NotificationHubClient.CreateClientFromConnectionString(connectionString, hubName);
        }

        [HttpPost]
        public async Task<HttpResponseMessage> Post([FromBody] RegistrationViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return new HttpResponseMessage(HttpStatusCode.BadRequest);
            }

            // We want to apply the push registration to an installation ID
            var installationId = Request.GetHeaderOrDefault("X-ZUMO-INSTALLATION-ID");
            if (installationId == null)
            {
                return new HttpResponseMessage(HttpStatusCode.BadRequest);
            }

            // Determine the right list of tasks to be handled
            List<string> validTags = new List<string>();
            foreach (string tag in model.tags)
            {
                if (tag.ToLower().Equals("news") || tag.ToLower().Equals("sports"))
                {
                    validTags.Add(tag.ToLower());
                }
            }
            // Add on the dynamic tags generated by authentication - note that the
            // [Authorize] tags means we are authenticated.
            var identity = await User.GetAppServiceIdentityAsync<AzureActiveDirectoryCredentials>(Request);
            validTags.Add($"$userid:{identity.UserId}");

            var emailClaim = identity.UserClaims.Where(c => c.Type.EndsWith("emailaddress")).FirstOrDefault();
            if (emailClaim != null)
            {
                validTags.Add($"$email:{emailClaim.Value}");
            }

            // Now we are ready to register with the hub
            Installation installation = new Installation
            {
                InstallationId = installationId,
                PushChannel = model.pushChannel,
                Platform = NotificationPlatform.Gcm,
                Tags = validTags
            };
            await hub.CreateOrUpdateInstallationAsync(installation);

            return new HttpResponseMessage(HttpStatusCode.OK);
        }
    }

    /// <summary>
    /// Format of the registration view model that is passed to the custom API
    /// </summary>
    public class RegistrationViewModel
    {
        public string pushChannel;

        public List<string> tags;
    }
}
